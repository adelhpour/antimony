name: BuildAntimony

on:
  push:
    branches-ignore:
      - '*'

jobs:
  build_on_OSs:
    name: Build on ${{ matrix.platform.name }}-python${{ matrix.python_version.version }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: macos-11-release
            os_type: macos
            os_name: macos-11
            arch: x86_64
            build_type: Release
            build_python: ON
          - name: macos-11-debug
            os_type: macos
            os_name: macos-11
            arch: x86_64
            build_type: Debug
            build_python: ON
          - name: ubuntu-latest-release
            os_type: ubuntu
            os_name: ubuntu-latest
            build_type: Release
            build_python: ON
          - name: ubuntu-latest-debug
            os_type: ubuntu
            os_name: ubuntu-latest
            build_type: Debug
            build_python: ON
          - name: windows-latest-release
            os_type: windows
            os_name: windows-latest
            expat_lib_name: libexpatmd.lib
            build_type: Release
            build_python: ON
          - name: windows-latest-debug
            os_type: windows
            os_name: windows-latest
            expat_lib_name: libexpatdMD.lib
            build_type: Debug
            build_python: OFF
          - name: manylinux2014-release
            os_type: manylinux
            os_name: ubuntu-latest
            container_image: quay.io/pypa/manylinux2014_x86_64
            build_type: Release
            build_python: ON
          - name: manylinux2014-debug
            os_type: manylinux
            os_name: ubuntu-latest
            container_image: quay.io/pypa/manylinux2014_x86_64
            build_type: Debug
            build_python: ON
        libroadrunner_deps_owner: [ "adelhpour" ]
        libroadrunner_deps_repo: [ "libroadrunner-deps" ]
        libroadrunner_deps_release_version: [ "2.1.1" ]
        python_version:
          #- name: py39
          #  version: "3.9"
          - name: py310
            version: "3.10"
          #- name: py311
          #  version: "3.11"
          #- name: py312
          #  version: "3.12"

    runs-on: ${{ matrix.platform.os_name }}
    container:
      image: ${{ matrix.platform.container_image || '' }}

    steps:
      - name: Checkout RoadRunner
        uses: actions/checkout@v3

      - name: Set MSVC as the default compiler on Windows
        if: matrix.platform.os_type == 'windows'
        uses: ilammy/msvc-dev-cmd@v1.6.0

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Install ccache
        shell: bash
        run: |
          cd ${RUNNER_WORKSPACE}
          if [ "${{ matrix.platform.os_type }}" == 'macos' ]; then
            brew install ccache
          elif [ "${{ matrix.platform.os_type }}" == 'ubuntu' ]; then
            sudo apt-get update
            sudo apt-get install -y ccache
          elif [ "${{ matrix.platform.os_type }}" == 'manylinux' ]; then
            mkdir -p ccache
            cd ccache
            curl -L https://github.com/ccache/ccache/releases/download/v4.9.1/ccache-4.9.1.tar.gz > ccache.tar.gz
            tar -zxf ccache.tar.gz
            rm ccache.tar.gz
            mkdir -p build-ccache
            mkdir -p install-ccache
            cd build-ccache
            cmake -DCMAKE_INSTALL_PREFIX="$RUNNER_WORKSPACE/ccache/install-ccache" -DCMAKE_BUILD_TYPE=Release ../ccache-4.9.1
            cmake --build . --target install
            echo "$RUNNER_WORKSPACE/ccache/install-ccache/bin" >> $GITHUB_PATH
          fi

      - name: Prepare ccache timestamp on non-Windows platforms
        if: matrix.platform.os_type != 'windows'
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: Set ccache cache directory on non-Windows
        if: matrix.platform.os_type != 'windows'
        shell: bash
        run: |
          cd ${RUNNER_WORKSPACE}
          echo "CCACHE_DIR=${RUNNER_WORKSPACE}/.ccache" >> "${GITHUB_ENV}"
          echo "COMPILER_LAUNCHER=ccache" >> "${GITHUB_ENV}"

      - name: Cache ccache files on non-Windows
        if: matrix.platform.os_type != 'windows'
        uses: actions/cache@v3
        with:
          path: ${RUNNER_WORKSPACE}/.ccache
          key:
            ${{ runner.os }}-${{ steps.ccache_cache_timestamp.outputs.timestamp
            }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
            ${{ runner.os }}-

      - name: Setup Python for non-manylinux platforms
        if: matrix.platform.build_python == 'ON' && matrix.platform.os_type != 'manylinux'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version.version }}

      - name: Setup Python for manylinux platforms
        if: matrix.platform.build_python == 'ON' && matrix.platform.os_type == 'manylinux'
        shell: bash
        run: |
          cd ${RUNNER_WORKSPACE}
          yum update -y
          yum install -y gcc gcc openssl-devel bzip2-devel libffi-devel epel-release openssl11-devel
          mkdir -p python${{ matrix.python_version.version }}
          cd python${{ matrix.python_version.version }}
          curl -L https://www.python.org/ftp/python/${{ matrix.python_version.version }}.0/Python-${{ matrix.python_version.version }}.0.tgz > python.tgz
          tar -zxf python.tgz
          rm python.tgz
          cd Python-${{ matrix.python_version.version }}.0
          sed -i 's/PKG_CONFIG openssl /PKG_CONFIG openssl11 /g' configure
          mkdir -p install-python
          ./configure --enable-optimizations --prefix=${RUNNER_WORKSPACE}/python${{ matrix.python_version.version }}/install-python
          make install
          echo "${RUNNER_WORKSPACE}/python${{ matrix.python_version.version }}/install-python/bin" >> $GITHUB_PATH
          echo "export PATH=${RUNNER_WORKSPACE}/python${{ matrix.python_version.version }}/install-python/bin:$PATH" >> $GITHUB_ENV

      - name: Download dependencies binaries
        shell: bash
        run: |
          cd ${RUNNER_WORKSPACE}
          mkdir -p libroadrunner-deps-binaries
          cd libroadrunner-deps-binaries
          curl -L "https://github.com/${{ matrix.libroadrunner_deps_owner }}/${{ matrix.libroadrunner_deps_repo }}/releases/download/v${{ matrix.libroadrunner_deps_release_version }}/${{ matrix.libroadrunner_deps_repo }}-${{ matrix.platform.os_name }}-${{ matrix.platform.build_type }}.zip" > libroadrunner-deps-${{ matrix.platform.name }}.zip
          unzip -q libroadrunner-deps-${{ matrix.platform.name }}.zip -d libroadrunner-deps-${{ matrix.platform.name }}
          rm libroadrunner-deps-${{ matrix.platform.name }}.zip
          echo LIBSBML_DIR="-DLIBSBML_INSTALL_DIR=${RUNNER_WORKSPACE}/libroadrunner-deps-binaries/libroadrunner-deps-${{ matrix.platform.name }}" >> "${GITHUB_ENV}"
          if [ "${{ matrix.platform.os_type }}" == 'windows' ]; then
            echo EXPAT_LIB="-DEXPAT_LIBRARY=${RUNNER_WORKSPACE}/libroadrunner-deps-binaries/libroadrunner-deps-${{ matrix.platform.name }}/lib/${{ matrix.platform.expat_lib_name }}" >> "${GITHUB_ENV}"
          elif [ "${{ matrix.platform.os_type }}" == 'manylinux' ]; then
            echo EXPAT_LIB="-DLIBEXPAT_LIBRARY=${RUNNER_WORKSPACE}/libroadrunner-deps-binaries/libroadrunner-deps-${{ matrix.platform.name }}/lib64/libexpat.a" >> "${GITHUB_ENV}"
          fi

      - name: Install Qt
        shell: bash
        run: |
          cd ${RUNNER_WORKSPACE}
          if [ "${{ matrix.platform.os_type }}" == 'macos' ]; then
            brew install qt@5
          elif [ "${{ matrix.platform.os_type }}" == 'ubuntu' ]; then
            sudo apt-get update
            sudo apt-get install -y qtbase5-dev
          elif [ "${{ matrix.platform.os_type }}" == 'windows' ]; then
            mkdir -p qt
            cd qt
            curl -L https://github.com/sys-bio/antimony/releases/download/libcheck/Qt5.15.2.msvc.zip > qt.zip
            unzip -q qt.zip -d qt
            rm qt.zip
            echo "a) qt directory"
            ls -l
            echo "b) qt/Qt5 directory"
            cd qt/Qt5
            ls -l
            echo Qt5_INSTALL_DIR="Qt5_DIR=${RUNNER_WORKSPACE}/qt/Qt5/5.15.2/msvc2019_64/lib/cmake/Qt5" >> "${GITHUB_ENV}"
          elif [ "${{ matrix.platform.os_type }}" == 'manylinux' ]; then
            yum install -y qt5-qtbase-devel
          fi

      - name: Create build directory
        shell: bash
        run: mkdir -p ${RUNNER_WORKSPACE}/build-antimony

      - name: Configure CMake for Antimony
        shell: bash
        run: |
          cd ${RUNNER_WORKSPACE}/build-antimony
          cmake $GITHUB_WORKSPACE \
          -G "Ninja" \
          -DCMAKE_BUILD_TYPE=${{ matrix.platform.build_type }} \
          -DCMAKE_OSX_ARCHITECTURES=${{ matrix.platform.arch }} \
          -DCMAKE_C_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          -DCMAKE_CXX_COMPILER_LAUNCHER=${COMPILER_LAUNCHER} \
          ${LIBSBML_DIR} \
          -DWITH_STATIC_SBML=ON \
          -DWITH_QTANTIMONY=OFF \
          ${Qt5_INSTALL_DIR} \
          -DWITH_LIBSBML_EXPAT=ON \
          ${EXPAT_LIB} \
          -DWITH_LIBSBML_LIBXML=OFF \
          -DWITH_PYTHON=${{ matrix.platform.build_python }} \
          -DCMAKE_INSTALL_PREFIX="${RUNNER_WORKSPACE}/install-antimony" \
          -DUSE_UNIVERSAL_BINARIES=OFF
          

          #-DWITH_QTANTIMONY=ON -DQt5_DIR=$(QT_INSTALL_PREFIX)/Qt5/5.15.2/msvc2019_64/lib/cmake/Qt5 -DEXTRA_LIBS=wsock32.lib $(PythonCMake)       -DWITH_CHECK=ON -DLIBCHECK_INCLUDE_DIR=$(CHECK_INSTALL_PREFIX)/include/ -DLIBCHECK_LIBRARY=$(CHECK_INSTALL_PREFIX)/lib/libcheck.lib

      - name: Build and Install Antimony
        shell: bash
        run: |
          cd ${RUNNER_WORKSPACE}/build-antimony
          cmake --build . --target install --config ${{ matrix.platform.build_type }}