# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(Date:yyyyMMdd)$(Rev:.r)

# specific branch build
trigger:
  branches:
    include:
    - develop
    - release
    - use-azure

variables:
  SOURCE_DIR: '$(System.DefaultWorkingDirectory)' # eg /home/vsts/work/1/s
  BUILD_DIR: '$(SOURCE_DIR)/build'
  INSTALL_DIR: '$(SOURCE_DIR)/antimony-$(Agent.OS)'
  DEPS_INSTALL_PREFIX: '$(SOURCE_DIR)/libroadrunner-deps' # e.g./home/vsts/work/1

stages:
########################################################################
# MacOS Build
#
  - stage: MacBuildAntimonyCpp
    dependsOn: []
    jobs:
      - job: MacBuildAntimonyCpp
        timeoutInMinutes: "0"
        displayName: MacBuildAntimonyCpp
        continueOnError: "false"
        pool:
          vmImage: 'macOS-10.15'
        strategy:
          matrix:
            64-bit Mac Release:
              BuildType: Release
            64-bit Mac Debug:
              BuildType: Debug
        steps:
          - script: |
              echo "SOURCE_DIR $(SOURCE_DIR)"
              echo "BUILD_DIR $(BUILD_DIR)"
              echo "INSTALL_DIR $(INSTALL_DIR)"
              echo "DEPS_INSTALL_PREFIX $(DEPS_INSTALL_PREFIX)"
              echo "Build.DefinitionName $(Build.DefinitionName)"
              echo "System.DefinitionId	 $(System.DefinitionId)"
              echo "Agent.OS $(Agent.OS)"

              echo "System.AccessToken  $(System.AccessToken)"
              echo "System.CollectionId $(System.CollectionId)"
              echo "System.CollectionUri  $(System.CollectionUri)"
              echo "System.DefaultWorkingDirectory  $(System.DefaultWorkingDirectory)"
              echo "System.DefinitionId $(System.DefinitionId)"
              echo "System.HostType $(System.HostType)"
              echo "System.JobAttempt $(System.JobAttempt)"
              echo "System.JobDisplayName $(System.JobDisplayName)"
              echo "System.JobId  $(System.JobId)"
              echo "System.JobName  $(System.JobName)"
              echo "System.PhaseAttempt $(System.PhaseAttempt)"
              echo "System.PhaseDisplayName $(System.PhaseDisplayName)"
              echo "System.PhaseName  $(System.PhaseName)"
              echo "System.StageAttempt $(System.StageAttempt)"
              echo "System.StageDisplayName $(System.StageDisplayName)"
              echo "System.StageName  $(System.StageName)"
              echo "System.PullRequest.IsFork $(System.PullRequest.IsFork)"
              echo "System.PullRequest.PullRequestId $(System.PullRequest.PullRequestId)"
              echo "System.PullRequest.PullRequestNumber $(System.PullRequest.PullRequestNumber)"
              echo "System.PullRequest.SourceBranch $(System.PullRequest.SourceBranch)"
              echo "System.PullRequest.SourceRepositoryURI $(System.PullRequest.SourceRepositoryURI)"
              echo "System.PullRequest.TargetBranch $(System.PullRequest.TargetBranch)"
              echo "System.TeamFoundationCollectionUri $(System.TeamFoundationCollectionUri)"
              echo "System.TeamProject $(System.TeamProject)"
              echo "System.TeamProjectId $(System.TeamProjectId)"
              echo "TF_BUILD $(TF_BUILD)"
            displayName: Print Variables
          - script: |
              mkdir $(DEPS_INSTALL_PREFIX)
            displayName: Make Directories
          - script: brew install ncurses
            displayName: install ncurses
          - script: brew install qt4
            displayName: install qt4
          - script: |
              cd /
              find . | grep QtGui4
            displayName: Find QT
          - task: DownloadPipelineArtifact@2
            # In this task we go and grab the build artefacts from
            # the libroadrunner-dependencies package
            inputs:
              source: 'specific'
              project: 'libroadrunner-deps'
              # pipeline is found in the url when looking at azure in browser.
              # for example, it looks like this:
              # - https://dev.azure.com/TheRoadrunnerProject/libroadrunner-deps/_build?definitionId=9
              pipeline: 9
              runVersion: 'latest'
              artifact: libroadrunner-deps-$(Agent.OS)-$(BuildType)
              path: $(DEPS_INSTALL_PREFIX)
            displayName: Download libroadrunner-deps install artifacts
          - script: |
              echo "$(DEPS_INSTALL_PREFIX)"
              echo "cd to $(DEPS_INSTALL_PREFIX)"
              cd $(DEPS_INSTALL_PREFIX)
              echo "ls: "
              ls
              echo "moving contents of $(DEPS_INSTALL_PREFIX)/install to  $(DEPS_INSTALL_PREFIX)"
              mv $(DEPS_INSTALL_PREFIX)/install-azure/$(BuildType)/** .
              rm -r $(DEPS_INSTALL_PREFIX)/install-azure
              ls
            displayName: Move Dependencies
#          - script: |
#              echo "Configuring antimony"
#              echo "mkdir build directory: $(BUILD_DIR)"
#              mkdir $(BUILD_DIR)
#              echo "CD to build dir: $(BUILD_DIR)"
#              cd $(BUILD_DIR)
#              cmake -DLIBSBML_INSTALL_DIR=$(DEPS_INSTALL_PREFIX) -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DCMAKE_BUILD_TYPE=$(BuildType) ..
#            displayName: Run CMake Configure Command
#          - script: |
#              echo "less -N $(BUILD_DIR)/source/CMakeFiles/antimony.dir/build.make"
#              less -N "$(BUILD_DIR)/source/CMakeFiles/antimony.dir/build.make"
#              echo "Building antimony"
#              echo "cd to build dir"
#              cd $(BUILD_DIR)
#              cmake --build . --target install --config $(BuildType) -j 12
#            displayName: Run CMake Build Command
#          - script: |
#              echo "cd to build dir $(BUILD_DIR)"
#              cd $(BUILD_DIR)
#              ctest --verbose --extra-verbose --progress
#            displayName: RunCTest
#          - task: CopyFiles@2
#            inputs:
#              contents: '$(INSTALL_DIR)/**'
#              targetFolder: $(Build.ArtifactStagingDirectory)
#            displayName: Copy to Staging Area
#          - publish: $(Build.ArtifactStagingDirectory)
#            artifact: antimony-MacOS10.15-$(BuildType)
#            displayName: Publish

#  - stage: MacBuildAntimonyPython
#    dependsOn: []
#    jobs:
#      - job: MacBuildAntimonyPython
#        timeoutInMinutes: "0"
#        displayName: MacBuildAntimonyPython
#        continueOnError: "false"
#        pool:
#          vmImage: 'macOS-10.15'
#        strategy:
#          matrix:
#            py39:
#              PythonVersion: 3.9
#              PythonName: py39
#        variables:
#          MinicondaRoot : '/usr/local/miniconda'
#          PythonRoot: '$(MinicondaRoot)/envs/$(PythonName)'
#          PythonLibDir: '$(PythonRoot)/lib'
#          PythonExecutable: '$(PythonRoot)/bin/python'
#          CondaExecutable: '$(MinicondaRoot)/condabin/conda'
#          PipExecutable: '$(PythonRoot)/bin/pip'

#          MINICONDA_CACHE: 'false'
#        steps:
#          - bash: echo "##vso[task.prependpath]$CONDA/bin"
#            displayName: Add conda to PATH

#          # On Hosted macOS, the agent user doesn't have ownership of Miniconda's installation directory/
#          # We need to take ownership if we want to update conda or install packages globally
#          - bash: sudo chown -R $USER $CONDA
#            displayName: Take ownership of conda installation
#          - script: |
#              echo "cd to source dir: $(SOURCE_DIR)"
#              cd $(SOURCE_DIR)
#              echo "ls"
#              ls
#              echo "which conda"
#              which conda
#              echo "cd miniconda root: $(MinicondaRoot)"
#              cd $(MinicondaRoot)
#              echo "ls"
#              ls
#              $(CondaExecutable) create --quiet --yes --name $(PythonName) python=$(PythonVersion)
#              echo "running: $(PipExecutable) install -r $(SOURCE_DIR)/test-requirements.txt"
#              $(PipExecutable) install -r $(SOURCE_DIR)/test-requirements.txt
#            displayName: InstallCondaEnv
#          - script: |
#              which conda
#              which python
#              echo "PythonVersion $(PythonVersion)"
#              echo "PythonName $(PythonName)"
#              echo "MinicondaRoot $(MinicondaRoot)"
#              echo "PythonRoot $(PythonRoot)"
#              echo "PythonLibDir $(PythonLibDir)"
#              echo "CondaExecutable $(CondaExecutable)"
##              $(CondaExecutable) -h
#            displayName: PrintPythonVariables
#          - script: |
#              mkdir $(DEPS_INSTALL_PREFIX)
#            displayName: Make Directories
#          - script: brew install ncurses
#            displayName: install ncurses
#          - task: DownloadPipelineArtifact@2
#            inputs:
#              source: 'specific'
#              project: 'libantimony-deps'
#              pipeline: 9
#              runVersion: 'latest'
#              artifact: libantimony-deps-$(Agent.OS)-Release
#              path: $(DEPS_INSTALL_PREFIX)
#            displayName: Download libantimony-deps install artifacts
#          - script: |
#              echo "$(DEPS_INSTALL_PREFIX)"
#              echo "cd to $(DEPS_INSTALL_PREFIX)"
#              cd $(DEPS_INSTALL_PREFIX)
#              echo "ls: "
#              ls
#              echo "moving contents of $(DEPS_INSTALL_PREFIX)/install to  $(DEPS_INSTALL_PREFIX)"
#              mv $(DEPS_INSTALL_PREFIX)/install-azure/Release/** .
#              rm -r $(DEPS_INSTALL_PREFIX)/install-azure
#              ls
#            displayName: Move Dependencies
#          - script: |
#              mkdir -p $(SOURCE_DIR)
#              mkdir -p $(BUILD_DIR)
#              mkdir -p $(INSTALL_DIR)
#            displayName: Make directories
#          - script: |
#              echo "cd to source dir: $(SOURCE_DIR)"
#              cd $(SOURCE_DIR)
#              echo "ls"
#              ls
#              echo "Variable PythonRoot set to $(PythonRoot)"
#              echo "Checking to see whether I can CD to PythonRoot"
#              cd $(PythonRoot)
#              echo "cd to build dir $(BUILD_DIR)"
#              cd $(BUILD_DIR)
#              ls
#              export LD_LIBRARY_PATH=$(PythonLibDir)
#              cmake -DRR_DEPENDENCIES_INSTALL_PREFIX=$(DEPS_INSTALL_PREFIX) -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DCMAKE_BUILD_TYPE=Release -DBUILD_PYTHON=ON -DPython_ROOT_DIR=$(PythonRoot) ..
#              cmake --build . --target install --config Release -j 12
#            displayName: BuildAntimonyWithPython
#          - script: |
#              echo "LD_LIBRARY_PATH $LD_LIBRARY_PATH"
#              export LD_LIBRARY_PATH=$(PythonLibDir)
#              echo "cd to isntall dir: $(INSTALL_DIR)"
#              cd $(INSTALL_DIR)
#              echo "ls in install dir"
#              ls
#              #$(PythonExecutable) site-packages/antimony/testing/__main__.py
#              echo "Switching to build dir: $(BUILD_DIR)"
#              cd $(BUILD_DIR)
#              echo "ctest --output-on-failure --verbose --extra-verbose --tests-regex python_tests*"
#              ctest --output-on-failure --verbose --extra-verbose --tests-regex python_tests*
#            displayName: RunPythonTests
#          - script: |
#              # todo workout whether the top few lines are needed now I'm using $(PythonExecutable)
#              #eval "$(conda shell.bash hook)"
#              #source activate $(PythonName)
#              #echo "which python: $(which python)"
#              #echo "which conda: $(which conda)"
#              #python_exe="$(which python)"
#              echo "cd to isntall dir: $(INSTALL_DIR)"
#              cd $(INSTALL_DIR)
#              echo "ls in install dir"
#              ls
#              echo "$(PythonExecutable) setup.py bdist_wheel"
#              $(PythonExecutable) setup.py bdist_wheel
#              echo "$(PythonExecutable) setup_rrplugins.py bdist_wheel"
#              $(PythonExecutable) setup_rrplugins.py bdist_wheel
#            displayName: Generate pip wheel

#          - task: CopyFiles@2
#            inputs:
#              contents: '$(INSTALL_DIR)/**'
#              targetFolder: $(Build.ArtifactStagingDirectory)/antimony-MacOS10.15-$(PythonName)
#            displayName: Copy Install Tree to Staging Area
#          - task: CopyFiles@2
#            inputs:
#              contents: '$(INSTALL_DIR)/dist/**'
#              targetFolder: $(Build.ArtifactStagingDirectory)/pip-wheels
#            displayName: Copy Pip Wheels to Staging Area
#          - publish: $(Build.ArtifactStagingDirectory)
#            artifact: antimony-MacOS10.15-$(PythonName)
#            displayName: Publish Pip Wheels Artifacts

#########################################################################
## Windows Build
##
#  - stage: WindowsBuildAntimonyCpp
#    dependsOn: []
#    jobs:
#      - job: WindowsBuildAntimonyCpp
#        timeoutInMinutes: "0"
#        displayName: WindowsBuildAntimonyCpp
#        continueOnError: "false"
#        pool:
#          vmImage: 'windows-2019'
#        strategy:
#          matrix:
#            64-bit Windows Release:
#              BuildType: Release
#        steps:
#          - powershell: |
#              echo "SOURCE_DIR $(SOURCE_DIR)"
#              echo "BUILD_DIR $(BUILD_DIR)"
#              echo "INSTALL_DIR $(INSTALL_DIR)"
#              echo "DEPS_INSTALL_PREFIX $(DEPS_INSTALL_PREFIX)"
#              echo "Build.DefinitionName $(Build.DefinitionName)"
#              echo "System.DefinitionId	 $(System.DefinitionId)"
#              echo "Agent.OS $(Agent.OS)"

#              echo "System.AccessToken  $(System.AccessToken)"
#              echo "System.CollectionId $(System.CollectionId)"
#              echo "System.CollectionUri  $(System.CollectionUri)"
#              echo "System.DefaultWorkingDirectory  $(System.DefaultWorkingDirectory)"
#              echo "System.DefinitionId $(System.DefinitionId)"
#              echo "System.HostType $(System.HostType)"
#              echo "System.JobAttempt $(System.JobAttempt)"
#              echo "System.JobDisplayName $(System.JobDisplayName)"
#              echo "System.JobId  $(System.JobId)"
#              echo "System.JobName  $(System.JobName)"
#              echo "System.PhaseAttempt $(System.PhaseAttempt)"
#              echo "System.PhaseDisplayName $(System.PhaseDisplayName)"
#              echo "System.PhaseName  $(System.PhaseName)"
#              echo "System.StageAttempt $(System.StageAttempt)"
#              echo "System.StageDisplayName $(System.StageDisplayName)"
#              echo "System.StageName  $(System.StageName)"
#              echo "System.TeamProject $(System.TeamProject)"
#              echo "System.TeamProjectId $(System.TeamProjectId)"
#              echo "TF_BUILD $(TF_BUILD)"
#            displayName: Print Variables
#          - powershell: |
#              mkdir $(DEPS_INSTALL_PREFIX)
#            displayName: Make Directories
#          - task: DownloadPipelineArtifact@2
#            inputs:
#              source: 'specific'
#              project: 'libroadrunner-deps'
#              pipeline: 9
#              runVersion: 'latest'
#              artifact: libroadrunner-deps-$(Agent.OS)-$(BuildType)
#              path: $(DEPS_INSTALL_PREFIX)
#            displayName: Download libroadrunner-deps install artifacts
#          - powershell: |
#              echo "$(DEPS_INSTALL_PREFIX)"
#              echo "cd to $(DEPS_INSTALL_PREFIX)"
#              cd $(DEPS_INSTALL_PREFIX)
#              echo "ls: "
#              ls
#              echo "moving contents of $(DEPS_INSTALL_PREFIX)/install to  $(DEPS_INSTALL_PREFIX)"
#              mv $(DEPS_INSTALL_PREFIX)/install-azure/$(BuildType)/** .
#              rm -R $(DEPS_INSTALL_PREFIX)/install-azure
#              ls
#            displayName: Move Dependencies
#          - powershell: |
#              echo "Configuring antimony"
#              echo "mkdir build directory: $(BUILD_DIR)"
#              mkdir $(BUILD_DIR)
#              echo "CD to build dir: $(BUILD_DIR)"
#              cd $(BUILD_DIR)
#              cmake -DRR_DEPENDENCIES_INSTALL_PREFIX=$(DEPS_INSTALL_PREFIX) -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DBUILD_RR_PLUGINS=ON -DBUILD_RR_CAPI=ON -DCMAKE_BUILD_TYPE=$(BuildType) ..
#            displayName: Run CMake Configure Command
#          - powershell: |
#              echo "Building antimony"
#              echo "cd to build dir"
#              cd $(BUILD_DIR)
#              cmake --build . --target install --config $(BuildType) -j 12
#            displayName: Run CMake Build Command
#          - powershell: |
#              echo "cd to build dir $(BUILD_DIR)"
#              cd $(BUILD_DIR)
#              ctest --verbose --extra-verbose --progress
#            displayName: RunCTest
#          - task: CopyFiles@2
#            inputs:
#              contents: '$(INSTALL_DIR)/**'
#              targetFolder: $(Build.ArtifactStagingDirectory)
#            displayName: Copy to Staging Area
#          - publish: $(Build.ArtifactStagingDirectory)
#            artifact: antimony-$(Agent.OS)-$(BuildType)
#            displayName: Publish

#  - stage: WindowsBuildAntimonyPython
#    dependsOn: []
#    jobs:
#      - job: WindowsBuildAntimonyPython
#        timeoutInMinutes: "0"
#        displayName: WindowsBuildAntimonyPython
#        continueOnError: "false"
#        pool:
#          vmImage: 'windows-2019'
#        strategy:
#          matrix:
#            py39:
#              PythonVersion: 3.9
#              PythonName: py39
#        variables:
#          MinicondaRoot : 'C:\Miniconda'
#          PythonRoot: '$(MinicondaRoot)\envs\$(PythonName)'
#          PythonLibDir: '$(PythonRoot)\Lib'
#          PythonScriptsDir: '$(PythonRoot)\Scripts'
#          PythonExecutable: '$(PythonRoot)\python.exe'
#          PipExecutable: '$(PythonScriptsDir)\pip.exe'

#        steps:
#          - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
#            displayName: Add conda to PATH
#          - powershell: |
#              where.exe conda
#              where.exe python
#              echo "PythonVersion $(PythonVersion)"
#              echo "PythonName $(PythonName)"
#              echo "MinicondaRoot $(MinicondaRoot)"
#              echo "PythonRoot $(PythonRoot)"
#              echo "PythonLibDir $(PythonLibDir)"
#            displayName: PrintPythonVariables
#          - powershell: |
#              mkdir -p $(DEPS_INSTALL_PREFIX)
#              mkdir -p $(INSTALL_DIR)
#              mkdir -p $(BUILD_DIR)
#            displayName: Make Directories
#          - task: DownloadPipelineArtifact@2
#            inputs:
#              source: 'specific'
#              project: 'libroadrunner-deps'
#              pipeline: 9
#              runVersion: 'latest'
#              artifact: libroadrunner-deps-$(Agent.OS)-Release
#              path: $(DEPS_INSTALL_PREFIX)
#            displayName: Download libroadrunner-deps install artifacts
#          - powershell: |
#              echo "$(DEPS_INSTALL_PREFIX)"
#              echo "cd to $(DEPS_INSTALL_PREFIX)"
#              cd $(DEPS_INSTALL_PREFIX)
#              echo "ls: "
#              ls
#              echo "moving contents of $(DEPS_INSTALL_PREFIX)/install to  $(DEPS_INSTALL_PREFIX)"
#              mv $(DEPS_INSTALL_PREFIX)/install-azure/Release/** .
#              rm -r $(DEPS_INSTALL_PREFIX)/install-azure
#              ls
#            displayName: Move Dependencies
#          - powershell: |
#              echo "where.exe conda"
#              where.exe conda
#              echo "where.exe python"
#              where.exe python
#              echo "Variable PythonRoot set to $(PythonRoot)"
#              echo "cd to source dir: $(SOURCE_DIR)"
#              cd $(SOURCE_DIR)
#              echo "ls"
#              ls
#              echo "Creating new conda environment"
#              conda create --quiet --yes --name $(PythonName) python=$(PythonVersion)
#              echo "pip help:"
#              $(PipExecutable) install --help
#              echo "Installing nose and numpy: $(PipExecutable) install --yes nose numpy pytest"
#              $(PipExecutable) install -q -r test-requirements.txt
#              $ENV:PATH="$ENV:PATH;$(PythonScriptsDir)"
#              echo "cd to build dir $(BUILD_DIR)"
#              cd $(BUILD_DIR)
#              ls
#              cmake -DRR_DEPENDENCIES_INSTALL_PREFIX=$(DEPS_INSTALL_PREFIX) -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DBUILD_RR_PLUGINS=ON -DBUILD_RR_CAPI=ON -DCMAKE_BUILD_TYPE=Release -DBUILD_PYTHON=ON -DPython_ROOT_DIR=$(PythonRoot) ..
#              cmake --build . --target install --config Release -j 12
#            displayName: BuildAntimonyWithPython
#          - powershell: |
#              echo "cd to isntall dir: $(INSTALL_DIR)"
#              cd $(INSTALL_DIR)
#              echo "python exe $(PythonExecutable)"
#              echo "ls in install dir"
#              ls
#              #$(PythonExecutable) site-packages/antimony/testing/__main__.py

#              echo "Switching to build dir: $(BUILD_DIR)"
#              cd $(BUILD_DIR)
#              echo "ctest --output-on-failure --verbose --extra-verbose --tests-regex python_tests*"
#              ctest -C Release --output-on-failure --verbose --extra-verbose --tests-regex python_tests*
#            displayName: RunPythonTests
#          - powershell: |
#              echo "cd to isntall dir: $(INSTALL_DIR)"
#              cd $(INSTALL_DIR)
#              echo "ls in install dir"
#              ls
#              $(PythonExecutable) setup.py bdist_wheel
#              $(PythonExecutable) setup_rrplugins.py bdist_wheel
#            displayName: Generate pip wheel

#          - task: CopyFiles@2
#            inputs:
#              contents: '$(INSTALL_DIR)/**'
#              targetFolder: $(Build.ArtifactStagingDirectory)/antimony-Windows2019-$(PythonName)
#            displayName: Copy Install Tree to Staging Area
#          - task: CopyFiles@2
#            inputs:
#              contents: '$(INSTALL_DIR)/dist/**'
#              targetFolder: $(Build.ArtifactStagingDirectory)/pip-wheels
#            displayName: Copy Pip Wheels to Staging Area
#          - publish: $(Build.ArtifactStagingDirectory)
#            artifact: antimony-Windows2019-$(PythonName)
#            displayName: Publish Pip Wheels Artifacts


##########################################################################
### Linux Build
###
#  - stage: LinuxBuildAntimonyCpp
#    dependsOn: []
#    jobs:
#      - job: LinuxBuildAntimonyCpp
#        timeoutInMinutes: "0"
#        displayName: LinuxBuildAntimonyCpp
#        continueOnError: "false"
#        pool:
#          vmImage: 'Ubuntu-18.04'
#        strategy:
#          matrix:
#            64-bit Linux Release:
#              BuildType: Release
#            64-bit Linux Debug:
#              BuildType: Debug
#        steps:
#          # we cannot upload prebuilt binaries onto github for linux debug version because of github file size limits.
#          - script: |
#              echo "SOURCE_DIR $(SOURCE_DIR)"
#              echo "BUILD_DIR $(BUILD_DIR)"
#              echo "INSTALL_DIR $(INSTALL_DIR)"
#              echo "DEPS_INSTALL_PREFIX $(DEPS_INSTALL_PREFIX)"
#              echo "Build.DefinitionName $(Build.DefinitionName)"
#              echo "System.DefinitionId	 $(System.DefinitionId)"
#              echo "Agent.OS $(Agent.OS)"

#              echo "System.AccessToken  $(System.AccessToken)"
#              echo "System.CollectionId $(System.CollectionId)"
#              echo "System.CollectionUri  $(System.CollectionUri)"
#              echo "System.DefaultWorkingDirectory  $(System.DefaultWorkingDirectory)"
#              echo "System.DefinitionId $(System.DefinitionId)"
#              echo "System.HostType $(System.HostType)"
#              echo "System.JobAttempt $(System.JobAttempt)"
#              echo "System.JobDisplayName $(System.JobDisplayName)"
#              echo "System.JobId  $(System.JobId)"
#              echo "System.JobName  $(System.JobName)"
#              echo "System.PhaseAttempt $(System.PhaseAttempt)"
#              echo "System.PhaseDisplayName $(System.PhaseDisplayName)"
#              echo "System.PhaseName  $(System.PhaseName)"
#              echo "System.StageAttempt $(System.StageAttempt)"
#              echo "System.StageDisplayName $(System.StageDisplayName)"
#              echo "System.StageName  $(System.StageName)"
#              echo "System.PullRequest.IsFork $(System.PullRequest.IsFork)"
#              echo "System.PullRequest.PullRequestId $(System.PullRequest.PullRequestId)"
#              echo "System.PullRequest.PullRequestNumber $(System.PullRequest.PullRequestNumber)"
#              echo "System.PullRequest.SourceBranch $(System.PullRequest.SourceBranch)"
#              echo "System.PullRequest.SourceRepositoryURI $(System.PullRequest.SourceRepositoryURI)"
#              echo "System.PullRequest.TargetBranch $(System.PullRequest.TargetBranch)"
#              echo "System.TeamFoundationCollectionUri $(System.TeamFoundationCollectionUri)"
#              echo "System.TeamProject $(System.TeamProject)"
#              echo "System.TeamProjectId $(System.TeamProjectId)"
#              echo "TF_BUILD $(TF_BUILD)"
#            displayName: Print Variables
#          - script: |
#              mkdir $(DEPS_INSTALL_PREFIX)
#            displayName: Make Directories
#          - script: |
#              echo "gcc $(gcc --version)"
#              echo "g++ $(g++ --version)"
#              sudo add-apt-repository ppa:ubuntu-toolchain-r/test
#              sudo apt-get update
#              sudo apt-get install -y gcc-10 g++-10
#              sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 1
#            displayName: Install g++10
#          - task: DownloadPipelineArtifact@2
#            inputs:
#              source: 'specific'
#              project: 'libroadrunner-deps'
#              pipeline: 9
#              runVersion: 'latest'
#              artifact: libroadrunner-deps-$(Agent.OS)-$(BuildType)
#              path: $(DEPS_INSTALL_PREFIX)
#            displayName: Download libroadrunner-deps install artifacts
#          - script: |
#              echo "$(DEPS_INSTALL_PREFIX)"
#              echo "cd to $(DEPS_INSTALL_PREFIX)"
#              cd $(DEPS_INSTALL_PREFIX)
#              echo "ls: "
#              ls
#              echo "moving contents of $(DEPS_INSTALL_PREFIX)/install to  $(DEPS_INSTALL_PREFIX)"
#              mv $(DEPS_INSTALL_PREFIX)/install-azure/$(BuildType)/** .
#              rm -r $(DEPS_INSTALL_PREFIX)/install-azure
#              ls
#            displayName: Move Dependencies
#          - script: |
#              export CC=/usr/bin/gcc-10
#              export CXX=/usr/bin/g++-10
#              export C=/usr/bin/gcc-10
#              echo "Configuring antimony"
#              echo "mkdir build directory: $(BUILD_DIR)"
#              mkdir $(BUILD_DIR)
#              echo "CD to build dir: $(BUILD_DIR)"
#              cd $(BUILD_DIR)
#              cmake -DRR_DEPENDENCIES_INSTALL_PREFIX=$(DEPS_INSTALL_PREFIX) -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DBUILD_RR_PLUGINS=ON -DBUILD_RR_CAPI=ON -DCMAKE_BUILD_TYPE=$(BuildType) ..
#            displayName: Run CMake Configure Command
#          - script: |
#              export CC=/usr/bin/gcc-10
#              export CXX=/usr/bin/g++-10
#              export C=/usr/bin/gcc-10
#              echo "Building antimony"
#              echo "cd to build dir"
#              cd $(BUILD_DIR)
#              cmake --build . --target install --config $(BuildType) -j 12
#            displayName: Run CMake Build Command
#          - script: |
#              export CC=/usr/bin/gcc-10
#              export CXX=/usr/bin/g++-10
#              export C=/usr/bin/gcc-10
#              echo "cd to build dir $(BUILD_DIR)"
#              cd $(BUILD_DIR)
#              ctest --verbose --extra-verbose --progress
#            displayName: RunCTest
#          - task: CopyFiles@2
#            inputs:
#              contents: '$(INSTALL_DIR)/**'
#              targetFolder: $(Build.ArtifactStagingDirectory)
#            displayName: Copy to Staging Area
#          - publish: $(Build.ArtifactStagingDirectory)
#            artifact: antimony-$(Agent.OS)-$(BuildType)
#            displayName: Publish

##########################################################################
### Many Linux Build
###
#  - stage: ManyLinux
#    displayName: ManyLinux2014
#    dependsOn: []
#    jobs:
#      - job:
#        strategy:
#          matrix:
#            py37:
#              PythonVersion: 3.7
#              PythonName: py37
#            py38:
#              PythonVersion: 3.8
#              PythonName: py38
#            py39:
#              PythonVersion: 3.9
#              PythonName: py39
#        pool:
#          vmImage: 'ubuntu-18.04'
#        container: ciaranwelsh/roadrunner-manylinux2014-base:latest
#        variables:
#          CCACHE_DIR: '$(Pipeline.Workspace)/ccache'
#          BUILD_DIRECTORY: '$(System.DefaultWorkingDirectory)/build'
#          SOURCE_DIRECTORY: '$(System.DefaultWorkingDirectory)'
#          INSTALL_DIRECTORY: '$(System.DefaultWorkingDirectory)/install-azure'
#          MinicondaRoot: '/Miniconda3'
#          PythonRoot: '$(MinicondaRoot)/envs/$(PythonName)'
#          CondaExecutable: '$(MinicondaRoot)/bin/conda'
#          PythonExecutable: '$(PythonRoot)/bin/python'
#          PythonLibDir: '$(PythonRoot)/lib'
#          PythonIncludeDir: '$(PythonRoot)/include'
#          PipExecutable: '$(PythonRoot)/bin/pip'

#        steps:
#          - checkout: self
#            submodules: recursive

#          - script: |

#              echo "SOURCE_DIRECTORY   $(SOURCE_DIRECTORY)"
#              if [ ! -d "$(SOURCE_DIRECTORY)" ]; then
#                echo "Can't find SOURCE_DIRECTORY at $(SOURCE_DIRECTORY)"
#                exit 1
#              fi

#              echo "MinicondaRoot      $(MinicondaRoot)"
#              if [ ! -d "$(MinicondaRoot)" ]; then
#                echo "Can't find MinicondaRoot at $(MinicondaRoot)"
#                exit 1
#              fi

#              echo "PythonRoot         $(PythonRoot)"
#              if [ ! -d "$(PythonRoot)" ]; then
#                echo "Can't find PythonRoot at $(PythonRoot)"
#                exit 1
#              fi

#              echo "CondaExecutable    $(CondaExecutable)"
#              if [ ! -f "$(CondaExecutable)" ]; then
#                echo "Can't find CondaExecutable at $(CondaExecutable)"
#                exit 1
#              fi

#              echo "PythonExecutable   $(PythonExecutable)"
#              if [ ! -f "$(PythonExecutable)" ]; then
#                echo "Can't find PythonExecutable at $(PythonExecutable)"
#                exit 1
#              fi

#              echo "PythonLibDir       $(PythonLibDir)"
#              if [ ! -d "$(PythonLibDir)" ]; then
#                echo "Can't find PythonLibDir at $(PythonLibDir)"
#                exit 1
#              fi

#              echo "PythonIncludeDir   $(PythonIncludeDir)"
#              if [ ! -d "$(PythonIncludeDir)" ]; then
#                echo "Can't find PythonIncludeDir at $(PythonIncludeDir)"
#                exit 1
#              fi

#              echo "PipExecutable      $(PipExecutable)"
#              if [ ! -f "$(PipExecutable)" ]; then
#                echo "Can't find PipExecutable at $(PipExecutable)"
#                exit 1
#              fi

#            displayName: Print Azure Variables

#          - script: |
#              echo "$(CondaExecutable) activate $(PythonName)"
#              eval "$($(CondaExecutable) shell.bash hook)"
#              $(CondaExecutable) init

#              echo ". ~/.bashrc"
#              . ~/.bashrc
#              $(CondaExecutable) activate $(PythonName)

#              echo "mkdir $(BUILD_DIRECTORY)"
#              mkdir $(BUILD_DIRECTORY)

#              echo "cd $(BUILD_DIRECTORY)"
#              cd $(BUILD_DIRECTORY)

#              echo "$(PipExecutable) install numpy pytest"
#              $(PipExecutable) install -r $(SOURCE_DIR)/test-requirements.txt

#              echo "sudo yum install -y ncurses-devel"
#              sudo yum install -y ncurses-devel

#              echo "cmake command: cmake -DRR_DEPENDENCIES_INSTALL_PREFIX=/libroadrunner-deps/install-libroadrunner-deps -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIRECTORY) -DBUILD_PYTHON=ON -DBUILD_RR_PLUGINS=ON -DBUILD_TESTS=ON -DPython_ROOT_DIR=$(PythonRoot) .."
#              cmake -DRR_DEPENDENCIES_INSTALL_PREFIX=/libroadrunner-deps/install-libroadrunner-deps -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIRECTORY) -DBUILD_PYTHON=ON -DBUILD_RR_PLUGINS=ON -DBUILD_TESTS=ON -DPython_ROOT_DIR=$(PythonRoot) ..
#              cmake --build . --target install --config Release -j 12
#              ctest --verbose --extra-verbose --output-on-failure

#            displayName: Build With Python
#          - script: |
#              echo ". ~/.bashrc"
#              . ~/.bashrc
#              $(CondaExecutable) activate $(PythonName)

#              echo "cd'ing to build dir $(BUILD_DIR)"
#              cd $(BUILD_DIR)
#              cmake --build . --target run-pytest-tests -j4

#            displayName: Run Tests

#          - script: |
#              echo "cd to $(INSTALL_DIRECTORY)"
#              cd $(INSTALL_DIRECTORY)

#              echo "ls"
#              ls

#              $(PipExecutable) install numpy pytest
#              echo "$(PythonExecutable) ./setup.py bdist_wheel"
#              $(PythonExecutable) ./setup.py bdist_wheel
#              $(PythonExecutable) ./setup_rrplugins.py bdist_wheel


#              # cd dist
#              # wheel=$(realpath $(ls))
#              # echo "wheel is: $wheel"
#              # $(PipExecutable) install $wheel
#            displayName: Build Pip Wheel
#          - task: CopyFiles@2
#            inputs:
#              sourceFolder: '$(INSTALL_DIRECTORY)'
#              contents: '**'
#              targetFolder: '$(Build.ArtifactStagingDirectory)/antimony-manylinux2014-$(PythonName)'
#            displayName: Copy install to artifact staging area
#          - task: PublishBuildArtifacts@1
#            inputs:
#              pathToPublish: '$(Build.ArtifactStagingDirectory)/antimony-manylinux2014-$(PythonName)'
#              artifactName: antimony-ManyLinux2014-$(PythonName)
#              Parallel: true
#              ParallelCount: 8












